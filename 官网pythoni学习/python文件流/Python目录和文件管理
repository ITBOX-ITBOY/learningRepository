Python目录和文件管理
在本文中，您将了解Python中的文件和目录管理，即创建目录，重命名，列出所有目录并使用它们。

一、Python目录和文件管理
        子目录的集合。Python有这个os 模块，它为我们提供了许多有用的方法来处理目录（和文件）。
如果您的Python程序中有大量文件可以处理，您可以将代码排列在不同的目录中，使事情更易于管理。
        目录或文件夹是文件和
1、获取当前目录
    我们可以使用该getcwd()方法获取当前的工作目录。
    此方法以字符串的形式返回当前工作目录。
    们也可以使用该getcwdb()方法来获取它作为字节对象。

        >>> import os
        >>> os.getcwd()
        'C:\\Program Files\\PyScripter'

        >>> os.getcwdb()
        b'C:\\Program Files\\PyScripter'
    额外的反斜杠意味着转义序列。该print()功能将正确呈现。

    >>> print(os.getcwd())
    C:\Program Files\PyScripter
2、改变目录
    我们可以使用该chdir()方法更改当前工作目录。
    我们要更改的新路径必须作为字符串提供给此方法。我们可以使用正斜杠（/）或反斜杠（\）来分隔路径元素。
    使用反斜杠时使用转义序列更为安全。
        >>> os.chdir('C:\\Python33')
        >>> print(os.getcwd())
        C:\Python33

3、列出目录和文件
    目录中的所有文件和子目录可以使用该listdir()方法知道。
    此方法接收路径并返回该路径中的子目录和文件列表。如果没有指定路径，它将从当前工作目录返回。

        >>> print(os.getcwd())
        C:\Python33

        >>> os.listdir()
        ['DLLs',
        'Doc',
        'include',
        'Lib',
        'libs',
        'LICENSE.txt',
        'NEWS.txt',
        'python.exe',
        'pythonw.exe',
        'README.txt',
        'Scripts',
        'tcl',
        'Tools']

        >>> os.listdir('G:\\')
        ['$RECYCLE.BIN',
        'Movies',
        'Music',
        'Photos',
        'Series',
        'System Volume Information']
4、制作新目录
    我们可以使用该mkdir()方法创建一个新的目录。
    此方法接收新目录的路径。如果未指定完整路径，则将在当前工作目录中创建新目录。

        >>> os.mkdir('test')
        >>> os.listdir()
        ['test']
5、重命名目录或文件
        该rename()方法可以重命名目录或文件。
        第一个参数是旧名称，新名称必须作为第二个参数。
        >>> os.listdir()
        ['test']
        >>> os.rename('test','new_one')
        >>> os.listdir()
        ['new_one']

6、删除目录或文件
        可以使用该remove()方法删除（删除）文件。

        同样，该rmdir()方法会删除一个空目录。

        >>> os.listdir()
        ['new_one', 'old.txt']

        >>> os.remove('old.txt')
        >>> os.listdir()
        ['new_one']

        >>> os.rmdir('new_one')
        >>> os.listdir()
        []
        但是，请注意，rmdir()方法只能删除空目录。
        为了删除非空目录，我们可以使用模块rmtree()内的方法shutil。
        >>> os.listdir()
        ['test']

        >>> os.rmdir('test')
        Traceback (most recent call last):
        ...
        OSError: [WinError 145] The directory is not empty: 'test'

        >>> import shutil
        >>> shutil.rmtree('test')
        >>> os.listdir()
        []