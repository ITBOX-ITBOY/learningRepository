
继承使我们能够定义一个从父类获取所有功能的类，并允许我们添加更多。在本文中，您将学习在Python中使用继承。


一、Python继承
        1、继承是面向对象编程的强大功能。
        2、它指的是定义一个新类，对现有的类很少或没有修改。
       3、新类被称为派生类（或子类），它所继承的类称为基类（或父类）。

二、Python继承语法
        class BaseClass：
          基类的主体
        DerivedClass（BaseClass）：
          派生类的正文
        派生类继承基类的功能，向其添加新功能。这导致代码的可重用性。

        Python中继承的例子
            多边形是3边或3边以上的封闭图形。说，我们有一个类Polygon定义如下。

                class Polygon:
                    def __init__(self, no_of_sides):
                        self.n = no_of_sides
                        self.sides = [0 for i in range(no_of_sides)]

                    def inputSides(self):
                        self.sides = [float(input("Enter side "+str(i+1)+" : ")) for i in range(self.n)]

                    def dispSides(self):
                        for i in range(self.n):
                            print("Side",i+1,"is",self.sides[i])

            这个类有数据属性来存储边数，n和每一边的大小作为列表，边。
            方法inputSides()每个方面的大小都相同，dispSides()同样会显示出来。
            三角形是一个三边形的多边形。所以，我们可以创建一个被称为Triangle继承的类Polygon。
            这使得类中Polygon可用的所有属性都可以使用Triangle。我们不需要再次定义它们（代码可重用性）。
            Triangle定义如下：
                class Triangle(Polygon):
                    def __init__(self):
                        Polygon.__init__(self,3)

                    def findArea(self):
                        a, b, c = self.sides
                        # calculate the semi-perimeter
                        s = (a + b + c) / 2
                        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
                        print('The area of the triangle is %0.2f' %area)
                然而，类Triangle有一个新的方法findArea()来查找和打印三角形的区域。这是一个示例运行。

                >>> t = Triangle()

                >>> t.inputSides()
                Enter side 1 : 3
                Enter side 2 : 5
                Enter side 3 : 4

                >>> t.dispSides()
                Side 1 is 3.0
                Side 2 is 5.0
                Side 3 is 4.0

                >>> t.findArea()
                The area of the triangle is 6.00
                我们可以看到，即使我们没有定义类似于类inputSides()或dispSides()类的方法Triangle，我们也可以使用它们。
                如果在类中没有找到属性，则继续搜索基类。如果基类本身是从其他类派生的，则会重复递归。

三、Python中的方法覆盖
        注意__init__()方法在这两个类中定义，Triangle以及Polygon。
        当这种情况发生时，派生类中的方法将覆盖基类中的方法。
        这就是说，__init__()在Triangle偏好相同的情况下Polygon。
        当覆盖基本方法时，我们倾向于扩展定义，而不是简单地替换它。
        通过从派生类（Polygon.__init__()从__init__()in Triangle）中调用基类中的方法来完成同样的操作。
        更好的选择是使用内置功能super()。所以，super().__init__(3)等于Polygon.__init__(self,3)和是首选。
        您可以在Python中了解有关super（）函数的更多信息。
        两个内置函数isinstance()，issubclass()用于检查继承。
        如果对象是类的实例或从其派生的其他类，函数isinstance()将返回True。Python中的每个类都从基类继承object。
            >>> isinstance(t,Triangle)
            True

            >>> isinstance(t,Polygon)
            True

            >>> isinstance(t,int)
            False

            >>> isinstance(t,object)
            True
            类似地，issubclass()用于检查类继承。

            >>> issubclass(Polygon,Triangle)
            False

            >>> issubclass(Triangle,Polygon)
            True

            >>> issubclass(bool,int)
            True