Python模块
在本文中，您将学习如何在Python中创建和导入自定义模块。
此外，您将发现不同的技术来导入和使用Python中的自定义和内置模块。

一、模块
    1、模块引用包含Python语句和定义的文件。
    2、一个包含Python代码的文件，例如：example.py，被称为模块，它的模块名称将是example。
    3、我们使用模块将大型程序分解成小型可管理和有组织的文件。此外，模块提供了代码的可重用性。
    4、我们可以在模块中定义我们最常用的函数并将其导入，而不是将其定义复制到不同的程序中。

    让我们创建一个模块。键入以下内容并将其另存为example.py。
    # Python模块样例
    def add(a, b):
       """This program adds two
       numbers and return the result"""

       result = a + b
       return result

   该函数需要两个数字并返回它们的和。add()例子

二、如何在Python中导入模块？
    1、可以将模块中的定义导入到另一个模块或Python中的交互式解释器。
    2、使用import关键字来进行导入
        example我们在Python提示符下键入以下内容。
        >>> import example

        这不输入example直接在当前符号表中定义的函数的名称。它只在example那里输入模块名称。
        使用模块名称，我们可以使用“模块名+函数名”操作访问该函数。
            例如：
                >>> example.add(4,5.5)
                9.5

    3、Python有大量的标准模块可用。
        1）可以查看完整的Python标准模块列表 及其内容。这些文件位于您安装Python的位置的Lib目录中。
        2）标准模块可以导入与导入用户定义的模块方式相同。

    4、有多种方式导入模块。
        如下：
        1）Python导入语句
         可以使用import语句导入一个模块，并使用如上所述的点运算符访问其中的定义。
            例子：
                # 导入math模块
                import math
                print("The value of pi is", math.pi)

                运行输出:
                    The value of pi is 3.141592653589793
        5、导入模块后重命名
           1）我们可以通过如下重命名来导入模块。
                 # 导入模块后重命名
                import math as m
                print("The value of pi is", m.pi)
            2）我们已经将math模块重命名为m。在某些情况下，这可以节省打字时间。
            3）请注意，math名称的此范围内是不会被识别的。math.pi是无效的，m.pi是正确的实现。

       6、Python从... import语句
            我们可以从模块导入特定的名称，而不会导入整个模块。
               例子：
                # 仅导入math模块中的pi
                from math import pi
                print("The value of pi is", pi)
                我们仅导入模块的属性pi。

       7、导入模块下的多个属性。
            如下：
                >>> from math import pi, e
                >>> pi
                3.141592653589793
                >>> e
                2.718281828459045


        8、导入所有名称
            我们可以使用以下构造将所有名称（定义）导入模块。
                # 导入math模块下的所有函数
                    from math import *
                    print("The value of pi is", pi)

            1） 使用星号（*）符号导入模块下所有内容不是一个很好的编程习惯。
            2）这可以导致标识符的重复定义。这也妨碍了我们的代码的可读性。

三、Python模块搜索路径
        在导入模块时，Python会查看几个地方：
            1）解释器首先寻找一个内置的模块，
            2）然后（如果没有找到）到定义的目录列表中sys.path。搜索按照这个顺序。

四、当前目录。
        PYTHONPATH （具有目录列表的环境变量）。
        与安装相关的默认目录。
            >>> import sys
            >>> sys.path
            [''，
            'C：\\ Python33 \\ Lib \\ idlelib'，
            'C：\\ Windows \\ system32 \\ python33.zip'，
            'C：\\ Python33 \\ DLLs'，
            'C：\\ Python33 \\ lib'，
            'C：\\ Python33'，
            'C：\\ Python33 \\ lib \\ site-packages']


我们可以添加修改此列表来添加我们自己的路径。

五、重新加载模块
      1、Python解释器在会话期间仅导入一次模块。这使事件更有效率。
        一个示例来显示它是如何工作的;
            假设我们在一个名为的模块中有以下代码my_module。
            # This module shows the effect of
            #  multiple imports and reload
            print("This code got executed")
            现在我们看到多个导入的效果。
                >>> import my_module
                This code got executed
                >>> import my_module
                >>> import my_module
            我们可以看到我们的代码只执行一次。这就是说，我们的模块只能导入一次。
            现在如果我们的模块在程序中改变了，我们将不得不重新加载它。
            一种方法是重新启动解释器。但这并没有多大帮助。

       2、Python提供了一个整洁的方法。我们可以使用模块reload()内的函数imp重新加载模块。
            >>> import imp
            >>> import my_module
            This code got executed
            >>> import my_module
            >>> imp.reload(my_module)
            This code got executed
            <module 'my_module' from '.\\my_module.py'>


        3、dir（）内置函数：我们可以使用该dir()函数找出在模块中定义的名称。
            例如，我们已经add()在开始的模块example中定义了一个函数。
                >>> dir(example)
                ['__builtins__',
                '__cached__',
                '__doc__',
                '__file__',
                '__initializing__',
                '__loader__',
                '__name__',
                '__package__',
                'add']
            1)可以看到排序的名称列表（以及add）。所有以下划线开头的其他名称都是与模块关联的默认Python属性（我们没有定义自己）。
                例如，该__name__属性包含模块的名称。
                    >>> import example
                    >>> example .__ name__
                    'example'

                我们当前命名空间中定义的所有名称都可以使用dir()没有任何参数的函数找到。
                    >>> a = 1
                    >>> b = "hello"
                    >>> import math
                    >>> dir()
                    ['__builtins__', '__doc__', '__name__', 'a', 'b', 'math', 'pyscripter']