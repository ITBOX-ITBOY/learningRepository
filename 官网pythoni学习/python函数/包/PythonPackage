Python包
在本文中，您将学习使用Python包将代码库分为干净，高效的模块。
此外，您将学习在Python程序中导入和使用自己的或第三方程序包。


一、Python包

        1、我们使用组织良好的层次结构来简化访问。Python具有用于文件的目录和模块的包。
        2、应用程序的大小随着大量模块的增加而增加，我们将类似的模块放在一个包中，并将不同的模块放在不同的包中。
           这使得项目（程序）易于管理和概念性地清除。
        3、目录可以包含子目录和文件，Python包可以具有子包和模块。
        4、目录必须包含一个名为__init__.pyPython 的文件，以将其视为一个包。
            该文件可以保留为空，但我们通常将该包的初始化代码放在此文件中。
            这是一个例子。假设我们正在开发游戏，一个可能的软件包和模块组织可以如下图所示。



二、从包中导入模块
        1、我们可以使用点（。）运算符从包导入模块。
            例如，
                如果要start在上面的示例中导入模块。
            import Game.Level.star

        2、现在如果这个模块包含一个名为的函数select_difficulty()，我们必须使用全名引用它。
            Game.Level.start.select_difficulty(2)

         3、导入没有包前缀的模块，如下所示。
            from Game.Level import start
         4、我们现在可以简单地调用函数如下。
            start.select_difficulty(2)
          5、另外一种在包中形成模块的必需功能（或类或变量）的方法如下(不推荐):
                from Game.Level.start import select_difficulty
             现在我们可以直接调用这个函数。
                select_difficulty(2)
            虽然更容易，但不推荐使用此方法。使用完整的命名空间避免混淆，并防止两个相同的标识符名称相互冲突。
