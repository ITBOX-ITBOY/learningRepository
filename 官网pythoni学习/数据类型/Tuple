Python元组
在本文中，您将学习有关Python元组的所有内容。更具体来说，什么是元组，如何创建它们，何时使用它们以及您应该熟悉的各种方法


在Python编程中，元组与列表类似。两者之间的区别在于，一旦分配了它，我们就不能改变元组元素，而在一个列表中，元素可以被改变。

元组比列表的优点
既然，元组与列表类似，它们都在类似的情况下使用。

然而，在列表中实现元组有一些优点。下面列出的一些主要优点：

我们通常使用异构（不同）数据类型的元组，并列出均匀（类似）数据类型。
由于元组是不可变的，迭代元组比列表更快。所以有一个轻微的性能提升。
包含不可变元素的元组可用作字典的关键字。有了列表，这是不可能的。
如果您的数据不会更改，则将其实现为tuple将保证其保持写保护。
创建元组
通过将所有项（元素）放在括号（）中，用逗号分隔来创建元组。括号是可选的，但是写一个很好的做法。

元组可以有任意数量的项目，它们可能有不同类型（整数，浮点数，列表，字符串等）。

# empty tuple
# Output: ()
my_tuple = ()
print(my_tuple)

# tuple having integers
# Output: (1, 2, 3)
my_tuple = (1, 2, 3)
print(my_tuple)

# tuple with mixed datatypes
# Output: (1, "Hello", 3.4)
my_tuple = (1, "Hello", 3.4)
print(my_tuple)

# nested tuple
# Output: ("mouse", [8, 4, 6], (1, 2, 3))
my_tuple = ("mouse", [8, 4, 6], (1, 2, 3))
print(my_tuple)

# tuple can be created without parentheses
# also called tuple packing
# Output: 3, 4.6, "dog"

my_tuple = 3, 4.6, "dog"
print(my_tuple)

# tuple unpacking is also possible
# Output:
# 3
# 4.6
# dog
a, b, c = my_tuple
print(a)
print(b)
print(c)

用一个元素创建一个元组有点棘手。

括号内有一个元素是不够的。我们需要一个逗号来表示它实际上是一个元组。

# only parentheses is not enough
# Output: <class 'str'>
my_tuple = ("hello")
print(type(my_tuple))

# need a comma at the end
# Output: <class 'tuple'>
my_tuple = ("hello",)
print(type(my_tuple))

# parentheses is optional
# Output: <class 'tuple'>
my_tuple = "hello",
print(type(my_tuple))

访问元组中的元素
有多种方法可以访问元组的元素。

索引
我们可以使用索引运算符[]访问索引从0开始的元组中的项目。

因此，具有6个元素的元组将索引从0到5.尝试访问其他元素（6，7，...）将引发IndexError。

索引必须是整数，所以我们不能使用float或其他类型。这将导致TypeError。

同样，使用嵌套索引访问嵌套元组，如下面的示例所示。


my_tuple = ('p','e','r','m','i','t')

# Output: 'p'
print(my_tuple[0])

# Output: 't'
print(my_tuple[5])

# index must be in range
# If you uncomment line 14,
# you will get an error.
# IndexError: list index out of range

#print(my_tuple[6])

# index must be an integer
# If you uncomment line 21,
# you will get an error.
# TypeError: list indices must be integers, not float

#my_tuple[2.0]

# nested tuple
n_tuple = ("mouse", [8, 4, 6], (1, 2, 3))

# nested index
# Output: 's'
print(n_tuple[0][3])

# nested index
# Output: 4
print(n_tuple[1][1])

运行程序时，输出将为：

p
t
s
4

负指数
Python允许其序列负向索引。

-1的索引指的是最后一个项目，-2表示最后一个项目，依此类推。

my_tuple = ('p','e','r','m','i','t')

# Output: 't'
print(my_tuple[-1])

# Output: 'p'
print(my_tuple[-6])

切片
我们可以使用切片运算符 - “”：“访问元组中的一系列项目。

my_tuple = ('p','r','o','g','r','a','m','i','z')

# elements 2nd to 4th
# Output: ('r', 'o', 'g')
print(my_tuple[1:4])

# elements beginning to 2nd
# Output: ('p', 'r')
print(my_tuple[:-7])

# elements 8th to end
# Output: ('i', 'z')
print(my_tuple[7:])

# elements beginning to end
# Output: ('p', 'r', 'o', 'g', 'r', 'a', 'm', 'i', 'z')
print(my_tuple[:])

通过考虑下面的元素之间的索引可以最好地显示切片。所以如果我们要访问一个范围，我们需要一个索引，它将从元组中分割出一部分。

Python中的元素切片

改变一个元组
列表不同，元组是不可变的。

这意味着一个元组的元素一旦被赋值就不能被改变。但是，如果元素本身是可变数据类型（如列表），则可以更改其嵌套项目。

我们还可以为不同的值（重新分配）分配一个元组

my_tuple = (4, 2, 3, [6, 5])

# we cannot change an element
# If you uncomment line 8
# you will get an error:
# TypeError: 'tuple' object does not support item assignment

#my_tuple[1] = 9

# but item of mutable element can be changed
# Output: (4, 2, 3, [9, 5])
my_tuple[3][0] = 9
print(my_tuple)

# tuples can be reassigned
# Output: ('p', 'r', 'o', 'g', 'r', 'a', 'm', 'i', 'z')
my_tuple = ('p','r','o','g','r','a','m','i','z')
print(my_tuple)

我们可以使用+运算符组合两个元组。这也被称为连接。

我们也可以使用*运算符重复元组中给定次数的元素。

+和*操作都会导致一个新的元组。

# Concatenation
# Output: (1, 2, 3, 4, 5, 6)
print((1, 2, 3) + (4, 5, 6))

# Repeat
# Output: ('Repeat', 'Repeat', 'Repeat')
print(("Repeat",) * 3)

删除元组
如上所述，我们不能更改元组中的元素。这也意味着我们无法从元组中删除或删除项目。

但是使用关键字del可以完全删除元组。

my_tuple = ('p','r','o','g','r','a','m','i','z')

# can't delete items
# if you uncomment line 8,
# you will get an error:
# TypeError: 'tuple' object doesn't support item deletion

#del my_tuple[3]

# can delete entire tuple
# NameError: name 'my_tuple' is not defined
del my_tuple
my_tuple

Python元组方法
添加项目或删除项目的方法不适用于元组。只有以下两种方法可用。
Python元组方法
count(x)	Return the number of items that is equal to x
index(x)	Return index of first item that is equal to x

my_tuple = ('a','p','p','l','e',)

# Count
# Output: 2
print(my_tuple.count('p'))

# Index
# Output: 3
print(my_tuple.index('l'))


其他元组操作
元组会员考试
我们可以使用关键字来测试一个元组中是否存在一个元组in。

my_tuple = ('a','p','p','l','e',)

# In operation
# Output: True
print('a' in my_tuple)

# Output: False
print('b' in my_tuple)

# Not in operation
# Output: True
print('g' not in my_tuple)

通过元组迭代
使用for循环，我们可以遍历元组中的每个项目。
# Output:
# Hello John
# Hello Kate
for name in ('John','Kate'):
     print("Hello",name)

     置类似功能all()，any()，enumerate()，len()，max()，min()，sorted()，tuple()等。通常与元组用来执行不同的任务。




内置函数与元组
    功能	描述
    all()	返回True如果元组的所有元素都为真（或如果元组是空的）。
    any()	返回True如果元组的任何元素是真实的。如果元组为空，则返回False.
    enumerate()	返回枚举对象。它包含元组作为对的所有项的索引和值。
    len()	返回元组中的长度（项目数）。
    max()	返回元组中最大的项目。
    min()	返回元组中最小的项
    sorted()	在元组中获取元素并返回一个新的排序列表（不对元组进行排序）。
    sum()	重新运行元组中所有元素的总和。
    tuple()	将一个可迭代（列表，字符串，集合，字典）转换为元组。



