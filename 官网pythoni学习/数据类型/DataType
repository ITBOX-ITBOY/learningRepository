Python数字，类型转换和数学
在本文中，您将了解Python中使用的不同数字，如何从一种数据类型转换为另一种数据类型，以及Python支持的数学运算。


一、Python数据类型
        1、Python支持整数，浮点数和复数。他们被定义为int，float并complex在Python类。
        2、整数和浮点由存在或不存在小数点分隔。5是整数，而5.0是一个浮点数。
        3、复数以形式写入x + yj，其中x是实部，y是虚部。
        4、可以使用type()函数来知道一个变量或一个值属于什么类型，并且isinstance()用于检查它是否属于一个特定的类。
            a = 5
            # 输出 : <class 'int'>
            print(type(a))

            # 输出: <class 'float'>
            print(type(5.0))

            # 输出: (8+3j)
            c = 5 + 3j
            print(c + 3)

            # 输出: True
            print(isinstance(c, complex))
         5、虽然整数可以是任意长度，但浮点数只能精确到15位小数（16位不准确）。

二、Python类型转换
        1、可以将一种类型的数字转换为另一种数字。这也被称为强制转换 。
        2、操作如加法减法强制整数隐式（自动）浮动，如果其中一个操作数为浮点数。
            >>> 1 + 2.0
                3.0
        在上面看到，1（整数）被强制为1.0（float）作为加法，结果也是一个浮点数。
        3、可以使用内置的函数int()，float()并且明确complex()地在类型之间转换。这些功能甚至可以从字符串转换。
            >>> int(2.3)
                2
                >>> int(-2.8)
                -2
                >>> float(5)
                5.0
                >>> complex('3+5j')
                (3+5j)

         4、从float转换为整数时，数字将被截断（整数更接近零）。

三、进制
    1、Python十进制
         Python内置类float执行一些令我们惊奇的计算。我们都知道1.1和2.2的总和是3.3，但Python似乎不同意。
            >>> (1.1 + 2.2) == 3.3
            False

          事实证明，浮点数在计算机硬件中实现为二进制分数，因为计算机只能理解二进制（0和1）。由
          于这个原因，我们知道的大部分小数点都不能准确地存储在我们的计算机中。
          我们来举个例子。我们不能将小数1/3表示为十进制数。这将给出0.33333333 ...这是无限长的，我们只能近似它。
          结果小数0.1将导致无限长的二进制分数0.000110011001100110011 ...而我们的电脑只存储有限数量。
          这只有大约0.1，但永远不会相等。因此，这是我们计算机硬件的局限性，而不是Python的错误

            >>> 1.1 + 2.2
            3.3000000000000003

            为了克服这个问题，我们可以使用Python附带的十进制模块。浮点数精度高达15位，十进制模块具有用户可设置的精度。
            import decimal
            # 输出: 0.1
            print(0.1)

            # 输出: Decimal('0.1000000000000000055511151231257827021181583404541015625')
            print(decimal.Decimal(0.1))

            注意上面例子中的尾随零。
     2、我们可能会问，为什么每次都不要执行十进制，而不是浮点数？
            主要原因是效率。执行浮点运算必须比十进制操作更快。

     3、何时使用十进制而不是浮点数？
        在以下情况下，我们通常使用十进制：
            1）正在制作需要精确的十进制表示的财务应用程序。
            2）要控制所需精度的水平时。
            3）想实现重要小数位的概念。
            4）想要像我们在学校一样进行这样的行动
四、Python分数
       1、 Python通过其fractions模块提供涉及分数的操作。
       2、一个分数具有分子和分母，它们都是整数。该模块支持有理数算术。
       3、我们可以以各种方式创建分数对象。
            import fractions
            # 输出: 3/2
            print(fractions.Fraction(1.5))
            # 输出: 5
            print(fractions.Fraction(5))
            # 输出: 1/3
            print(fractions.Fraction(1,3))

       4、在创建分数时float，我们可能会得到一些不寻常的结果。这是由于前面部分讨论的不完美的二进制浮点数表示。
            幸运的是，Fraction也允许我们用字符串进行实例化。这是使用十进制数时的首选方案。
            import fractions
            # 作为float
            # 输出: 2476979795053773/2251799813685248
            print(fractions.Fraction(1.1))

            # 作为 string
            #输出: 11/10
            print(fractions.Fraction('1.1'))

        5、fractions数据类型支持所有基本操作。
            例子：
                from fractions import Fraction as F
                # 输出: 2/3
                print(F(1,3) + F(1,3))

                # 输出: 6/5
                print(1 / F(5,6))

                # 输出: False
                print(F(-3,10) > 0)

                # 输出: True
                print(F(-3,10) < 0)

五、Python数学
        Python提供模块，math并random执行不同的数学，如三角学，对数，概率和统计学等。
            import math
            # 输出: 3.141592653589793
            print(math.pi)

            # 输出: -1.0
            print(math.cos(math.pi))

            # 输出: 22026.465794806718
            print(math.exp(10))

            # 输出: 3.0
            print(math.log10(1000))

            # 输出: 1.1752011936438014
            print(math.sinh(1))

            #输出: 720
            print(math.factorial(6))


            以下是Python数学模块中可用的完整列表功能和属性。
                import random
                # 输出: 16
                print(random.randrange(10,20))
                x = ['a', 'b', 'c', 'd', 'e']
                # Get random choice
                print(random.choice(x))
                # Shuffle x
                random.shuffle(x)
                # Print the shuffled x
                print(x)
                # Print random element
