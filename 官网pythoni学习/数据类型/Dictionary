在本文中，您将学习有关Python字典的所有内容; 如何创建，访问，添加和删除元素以及各种内置方法。

一、Python词典
    1、Python字典是一个无序的项目集合。虽然其他复合数据类型只有值作为元素，字典具有键：值对。
    2、字典被优化以在键已知时检索值。

二、如何创建字典？
    1、创建一个字典是简单的将项目放在大括号{}中用逗号分隔。
    2、一个项目有一个键，相应的值表示为一对，键：值。
    3、虽然值可以是任何数据类型并且可以重复，但键必须是不可变类型（字符串，数字或不可变元素的元组），并且必须是唯一的。

        # empty dictionary
        my_dict = {}

        # dictionary with integer keys
        my_dict = {1: 'apple', 2: 'ball'}

        # dictionary with mixed keys
        my_dict = {'name': 'John', 1: [2, 4, 3]}

        # using dict()
        my_dict = dict({1:'apple', 2:'ball'})

        # from sequence having each item as a pair
        my_dict = dict([(1,'apple'), (2,'ball')])


如上所述，我们还可以使用内置函数创建一个字典dict()。
三、如何从字典访问元素？
    当索引与其他容器类型一起使用以访问值时，字典使用键。
    键可以在方括号内或与get()方法一起使用。
    同时采用的不同get()的是，它返回None的不是KeyError，如果关键是没有找到。

        my_dict = {'name':'Jack', 'age': 26}

        # Output: Jack
        print(my_dict['name'])

        # Output: 26
        print(my_dict.get('age'))

        # Trying to access keys which doesn't exist throws error
        # my_dict.get('address')
        # my_dict['address']

        When you run the program, the output will be:
        Jack
        26

四、如何更改或添加字典中的元素？
    词典是可变的 我们可以添加新项目或使用赋值运算符更改现有项目的值。
    如果密钥已经存在，值将被更新，否则新的密钥：值对被添加到字典。

        my_dict = {'name':'Jack', 'age': 26}

        # update value
        my_dict['age'] = 27

        #Output: {'age': 27, 'name': 'Jack'}
        print(my_dict)

        # add item
        my_dict['address'] = 'Downtown'

        # Output: {'address': 'Downtown', 'age': 27, 'name': 'Jack'}
        print(my_dict)
        运行程序时，输出将为：

        {'name'：'Jack'，'age'：27}
        {'name'：'Jack'，'age'：27，'address'：'Downtown'}


五、如何从字典中删除或删除元素？
    我们可以使用该方法删除字典中的特定项目pop()。此方法使用提供的键删除项，并返回值。
    该方法popitem()可用于从字典中删除并返回任意项（key，value）。所有项目可以使用该clear()方法一次性删除。
    我们还可以使用del关键字来删除单个项目或整个字典本身。

        # create a dictionary
        squares = {1:1, 2:4, 3:9, 4:16, 5:25}

        # remove a particular item
        # Output: 16
        print(squares.pop(4))

        # Output: {1: 1, 2: 4, 3: 9, 5: 25}
        print(squares)

        # remove an arbitrary item
        # Output: (1, 1)
        print(squares.popitem())

        # Output: {2: 4, 3: 9, 5: 25}
        print(squares)

        # delete a particular item
        del squares[5]

        # Output: {2: 4, 3: 9}
        print(squares)

        # remove all items
        squares.clear()

        # Output: {}
        print(squares)

        # delete the dictionary itself
        del squares

        # Throws Error
        # print(squares)

        When you run the program, the output will be:

        16
        {1: 1, 2: 4, 3: 9, 5: 25}
        (1, 1)
        {2: 4, 3: 9, 5: 25}
        {2: 4, 3: 9}
        {}

六、Python字典方法
    字典提供的方法列在下面。其中一些已经在上述例子中被使用过。

    Python字典方法
    方法	描述
    clear()	从字典中删除所有项目。
    copy()	返回字典的浅拷贝。
    fromkeys（seq [，v ]）	从seq返回一个带有键的新字典，值等于v（默认为None）。
    get（key [，d ]）	价值回归的关键。如果键不退出，返回d（默认为None）。
    items()	返回字典项目的新视图（键值）。
    keys()	返回字典键的新视图。
    pop(key[,d])	使用键删除该项目并返回其值，或d如果找不到键。如果没有提供d并且没有找到密钥，则加注KeyError。
    popitem（）	删除并返回一个仲裁项（key，value）。KeyError如果字典为空，则引发。
    setdefault（key [，d ]）	如果键在字典中，则返回其值。如果没有，请插入值为d并返回d（默认为）的键。None
    update([other])	更新与来自键/值对字典等，覆盖现有的密钥。
    values()	返回字典值的新视图

    以下是使用这些方法的一些示例。

    marks = {}.fromkeys(['Math','English','Science'], 0)

    # Output: {'English': 0, 'Math': 0, 'Science': 0}
    print(marks)

    for item in marks.items():
        print(item)

    # Output: ['English', 'Math', 'Science']
    list(sorted(marks.keys()))


七、Python字典理解
        1、词典理解是从Python中迭代创建新词典的一种优雅简洁的方法。
        2、字典理解由一个表达式对（键：值），后跟for语句大括号{}。

        这是一个例子，使每个项目是一个数字和它的正方形的字典。

        squares = {x: x*x for x in range(6)}
        # Output: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
        print(squares)

        这段代码相当于

        squares = {}
        for x in range(6):
         squares[x] = x*x
    3、字典理解可以可选地包含更多for或if语句。
    4、可选if语句可以过滤掉项目以形成新的字典。

        这里有一些例子，使字典只有奇怪的项目。

        odd_squares = {x: x*x for x in range(11) if x%2 == 1}

        # Output: {1: 1, 3: 9, 5: 25, 7: 49, 9: 81}
           print(odd_squares)

八、字典其他操作
我们可以测试关键字是否在字典中，或者不使用关键字in。请注意，成员资格测试仅适用于键，而不是值。
        squares = {1: 1, 3: 9, 5: 25, 7: 49, 9: 81}

        # Output: True
        print(1 in squares)

        # Output: True
        print(2 not in squares)

        # membership tests for key only not value
        # Output: False
        print(49 in squares)

九、通过字典迭代
    使用for循环，我们可以遍历字典中的每个键。

    squares = {1: 1, 3: 9, 5: 25, 7: 49, 9: 81}
    for i in squares:
        print(squares[i])

十、内置字典功能
    内置类似功能all()，any()，len()，cmp()，sorted()等。通常与字典用于执行不同的任务。

    内置字典功能
    功能	描述
    all()	返回True如果字典的所有键都为真（或如果字典是空的）。
    any()）	返回True如果字典中的任何关键的是真实的。如果字典为空，返回False.
    LEN（）	返回字典中的长度（项目数）。
    CMP（）	比较两个词典的项目。
    sorted()	在字典中返回键的新排序列表。

    以下是使用内置函数来处理字典的一些示例。

    squares = {1: 1, 3: 9, 5: 25, 7: 49, 9: 81}

    # Output: 5
    print(len(squares))

    # Output: [1, 3, 5, 7, 9]
    print(sorted(squares))