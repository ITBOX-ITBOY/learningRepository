Python生成器
在本文中，您将学习如何使用Python生成器轻松创建迭代，它与迭代器和常规函数的区别，以及为什么应该使用它。

在Python中构建迭代器有很多开销; 我们必须实施一个类__iter__()和__next__()方法，跟踪内部状态，StopIteration当没有值返回等时提高。

这是冗长和反直觉的。发电机在这种情况下进入救援。

Python生成器是创建迭代器的简单方法。我们上面提到的所有开销都是由Python中的生成器自动处理的。

简单来说，生成器是返回一个可以迭代的对象（迭代器）的函数（一次一个值）。

如何在Python中创建生成器？
在Python中创建生成器是相当简单的。它与使用yield语句而不是语句定义正常函数一样简单return。

如果一个函数包含至少一个yield声明（它可能包含其他yield或return报表），就变成了发电机的功能。双方yield并return会从一个函数返回一定的价值。

不同之处在于，一个return语句完全终止一个函数，yield语句暂停该函数来保存其所有状态，并且随后在连续的调用中继续执行。

发电机功能与正常功能的差异
以下是发电机功能与正常功能的不同之处。

发生器函数包含一个或多个yield语句。
当被调用时，它返回一个对象（迭代器），但不会立即开始执行。
方法喜欢__iter__()并__next__()自动实现。所以我们可以重复使用这些项目next()。
一旦函数产生，该函数将被暂停，并将该控件传输给调用者。
本地变量及其状态在连续调用之间被记住。
最后，当功能终止时，StopIteration会在进一步的电话上自动提升。
以下是举例说明上述所有要点。我们有一个名称my_gen()为几个yield语句的生成器函数。

# A simple generator function
def my_gen():
    n = 1
    print('This is printed first')
    # Generator function contains yield statements
    yield n

    n += 1
    print('This is printed second')
    yield n

    n += 1
    print('This is printed at last')
    yield n


    下面给出了翻译中的交互式运行。在Python shell中运行它们以查看输出。

>>> # It returns an object but does not start execution immediately.
>>> a = my_gen()

>>> # We can iterate through the items using next().
>>> next(a)
This is printed first
1
>>> # Once the function yields, the function is paused and the control is transferred to the caller.

>>> # Local variables and theirs states are remembered between successive calls.
>>> next(a)
This is printed second
2

>>> next(a)
This is printed at last
3

>>> # Finally, when the function terminates, StopIteration is raised automatically on further calls.
>>> next(a)
Traceback (most recent call last):
...
StopIteration
>>> next(a)
Traceback (most recent call last):
...
StopIteration
在上面的例子中需要注意的一点是，在每个调用之间记住变量n的值。

与正常功能不同，当函数产生时，局部变量不会被破坏。此外，生成器对象只能重复一次。

要重新启动该过程，我们需要使用类似的方法创建另一个生成器对象a = my_gen()。

注意：最后要注意的是，我们可以直接使用带有for循环的生成器。

这是因为一个for循环使用迭代器并使用next()函数进行迭代。抬起时自动结束StopIteration。查看这里了解一个for循环是如何在Python中实际实现的。

# A simple generator function
def my_gen():
    n = 1
    print('This is printed first')
    # Generator function contains yield statements
    yield n

    n += 1
    print('This is printed second')
    yield n

    n += 1
    print('This is printed at last')
    yield n

# Using for loop
for item in my_gen():
    print(item)

    When you run the program, the output will be:

This is printed first
1
This is printed second
2
This is printed at last
3


具有循环的Python生成器
上面的例子是不太用的，我们研究它只是为了了解在后台发生了什么。

通常，发电机功能用具有适当终止条件的回路实现。

让我们举一个反转字符串的生成器的例子。

def rev_str(my_str):
    length = len(my_str)
    for i in range(length - 1,-1,-1):
        yield my_str[i]

# For loop to reverse the string
# Output:
# o
# l
# l
# e
# h
for char in rev_str("hello"):
     print(char)


     在这个例子中，我们使用range()函数使用for循环以相反的顺序获取索引。

事实证明，这个生成器函数不仅可以使用字符串，还可以使用其他类型的列表，元组等迭代。

Python生成器表达式
简单的生成器可以使用生成器表达式在飞行中轻松创建。它使建筑发电机变得容易。

与lambda函数一样创建一个匿名函数，生成器表达式创建一个匿名生成器函数。

生成器表达式的语法与Python中列表的理解类似。但方括号用圆括号替换。

列表推导和生成器表达式之间的主要区别在于，当列表推导产生整个列表时，生成器表达式一次生成一个项目。

他们很懒惰，只有在被要求时才能生产物品。因此，生成器表达式的存储器效率高于等效列表的理解值。

# Initialize the list
my_list = [1, 3, 6, 10]

# square each term using list comprehension
# Output: [1, 9, 36, 100]
[x**2 for x in my_list]

# same thing can be done using generator expression
# Output: <generator object <genexpr> at 0x0000000002EBDAF8>
(x**2 for x in my_list)


我们可以看到，生成器表达式没有立即产生所需的结果。相反，它返回一个发生器对象，并根据需要生成物品。

# Intialize the list
my_list = [1, 3, 6, 10]

a = (x**2 for x in my_list)
# Output: 1
print(next(a))

# Output: 9
print(next(a))

# Output: 36
print(next(a))

# Output: 100
print(next(a))

# Output: StopIteration
next(a)

生成器表达式可以在函数内部使用。当以这种方式使用时，圆括号可以丢弃。

>>> sum(x**2 for x in my_list)
146

>>> max(x**2 for x in my_list)
100
为什么在Python中使用生成器？
有几个原因使得发电机成为有吸引力的实施。

易于实施
与其迭代器类相比，发生器可以以清晰简洁的方式实现。以下是使用迭代器类来实现2的幂次序的例子。

class PowTwo:
    def __init__(self, max = 0):
        self.max = max

    def __iter__(self):
        self.n = 0
        return self

    def __next__(self):
        if self.n > self.max:
            raise StopIteration

        result = 2 ** self.n
        self.n += 1
        return result
这很长 现在让我们使用发电机功能做同样的事情。

def PowTwoGen(max = 0):
    n = 0
    while n < max:
        yield 2 ** n
        n += 1
由于发电机自动跟踪细节，实施简洁，干净。

2.高效的内存
返回序列的正常函数将在返回结果之前创建内存中的整个序列。如果序列中的项目数量非常大，这是一个过分的。

这种序列的生成器实现是记忆友好的并且是优选的，因为它一次仅产生一个项目。

代表无限流
发电机是表现无限数据流的绝佳媒介。无限流不能存储在内存中，由于生成器一次只产生一个项目，因此可以表示无限数据流。

以下示例可以生成所有偶数（至少在理论上）。

def all_even():
    n = 0
    while True:
        yield n
        n += 2
4.流水线发电机
发电机可用于管理一系列操作。这最好用一个例子说明。

假设我们有一个着名的快餐连锁店的日志文件。日志文件有一列（第4列），用于跟踪每小时销售的比萨饼数量，并且我们要求总和找到在5年内销售的总比萨饼。

假设一切都是字符串，不可用的数字被标记为“N / A”。这样做的生成器实现可以如下。

with open('sells.log') as file:
    pizza_col = (line[3] for line in file)
    per_hour = (int(x) for x in pizza_col if x != 'N/A')
    print("Total pizzas sold = ",sum(per_hour))
这种流水线是高效和易于阅读（是的，很多更酷！）。